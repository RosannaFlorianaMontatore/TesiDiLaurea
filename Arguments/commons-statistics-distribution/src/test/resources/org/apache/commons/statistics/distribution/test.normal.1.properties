# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

parameters = 2.1 1.4
mean = 2.1
variance = 1.96

# Quantiles computed using R
cdf.points = \
  -Inf, -2.226325228634938, -1.156887023657177, -0.643949578356075, -0.2027950777320613, 0.305827808237559,\
  6.42632522863494, 5.35688702365718, 4.843949578356074, 4.40279507773206, 3.89417219176244, Inf
cdf.values = \
  0.0000000000000000000000 0.0010000000000000013219 0.0099999999999999984734 \
  0.0250000000000000291434 0.0500000000000000444089 0.0999999999999999500400 \
  0.9989999999999999991118 0.9899999999999999911182 0.9749999999999999777955 \
  0.9499999999999998445688 0.8999999999999999111822 1.0000000000000000000000
pdf.values = \
  0.0000000000000000000000 0.0024050643407599972025 0.0190372444310414577762 \
  0.0417464784321681450785 0.0736683145538366834781 0.1253559513803476632710 \
  0.0024050643407599906973 0.0190372444310413987956 0.0417464784321682005896 \
  0.0736683145538367945004 0.1253559513803478020488 0.0000000000000000000000
sf.values = \
   1.00000000000000000000000 0.99899999999999999911182 \
   0.98999999999999999111822 0.97499999999999997779554 \
   0.94999999999999995559108 0.90000000000000002220446 \
   0.00099999999999999806925 0.00999999999999996204425 \
   0.02500000000000006383782 0.05000000000000011379786 \
   0.10000000000000008881784 0.00000000000000000000000

# High-precision computation.
# This is a reference for which computation using the error function is the most accurate:
# dev = x - u
# cdf = 0.5 * erfc(-dev / (sd * sqrt(2)))
#     = 0.5 * erfc(-dev / sd / sqrt(2))
#     = 0.5 * erfc(sqrt(0.5) * -dev / sd)
#
# Compute to high precision using Matlab's VPA.
# Values must use Matlab's vpa with the same double values (if not machine representable).
# Compute the exact representation using BigDecimal, e.g.:
# jshell> new BigDecimal(2.1)
# $1 ==> 2.100000000000000088817841970012523233890533447265625
#
# E.g.
# u = sym('2.100000000000000088817841970012523233890533447265625');
# s = sym('1.399999999999999911182158029987476766109466552734375');
# x = sym('-10.300000000000000710542735760100185871124267578125');
# vpa(erfc(((u - x)/s)/sqrt(sym(2)))/sym(2))
#
# Values can vary in the extreme tail, e.g.
# Mathematica:                 2.741222634611109e-18   4.1045652533919113e-19
# matlab (standard precision): 2.7412226346111088e-18  4.1045652533919113e-19
# scipy:                       2.7412226346110703e-18  4.1045652533918685e-19
cdf.hp.points = -10, -10.3
cdf.hp.values = 2.74122263461107252124815886312e-18, 4.10456525339188007632261800065e-19

# E.g.
# x = sym(14.5)
# x = sym('13.9000000000000003552713678800500929355621337890625')
# vpa(erfc(((x - u)/s)/sqrt(sym(2)))/sym(2))
#
# Values can vary in the extreme tail, e.g.
# Mathematica:                 4.1045652533919576e-19  1.749552800697539e-17
# matlab (standard precision): 4.1045652533919113e-19  1.7495528006975397e-17
# scipy:                       4.1045652533918685e-19  1.7495528006975224e-17
sf.hp.points = 14.5, 13.9
sf.hp.values = 4.10456525339190342717686865166e-19, 1.74955280069751640746342569694e-17

# Overridden tolerances
sf.mapping.relative = 5e-14
cdf.hp.relative = 1e-14
cdf.hp.mapping.relative = 5e-14
sf.hp.relative = 1e-14
sf.hp.mapping.relative = 5e-14
